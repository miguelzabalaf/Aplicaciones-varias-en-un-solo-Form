<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RichTextBox1.Text" xml:space="preserve">
    <value>Public Class Nominas
    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        cboCargo.Items.Add("Gerente")
        cboCargo.Items.Add("Administrador")
        cboCargo.Items.Add("Contador")
    End Sub

    Private Sub CboCargo_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboCargo.SelectedIndexChanged
        Select Case cboCargo.SelectedIndex
            Case 0
                txtSueldo.Text = CStr(1600000)
            Case 1
                txtSueldo.Text = CStr(1200000)
            Case 2
                txtSueldo.Text = CStr(900000)
        End Select

        Dim Mensaje, Titulo, Rpta As String
        Mensaje = "¿Solicitará Adelanto?"
        Titulo = "Adelanto del Empleado"
        Rpta = CStr(MsgBox(Mensaje, MsgBoxStyle.YesNo, Titulo))
        If Val(Rpta) = vbYes Then
            MsgBox("tu Respuesta fue 'Si'")
            txtAdelanto.Enabled = True
            txtAdelanto.Focus()
        Else
            MsgBox("tu Respuesta fue 'No'")
            txtAdelanto.Enabled = False
            txtBonificacion.Focus()
        End If


    End Sub

    Private Sub TxtAdelanto_TextChanged(sender As Object, e As EventArgs) Handles txtAdelanto.TextChanged
        Dim Maxsueldo As Double
        Maxsueldo = Val(txtSueldo.Text) * 0.25
        If Val(txtAdelanto.Text) &gt; Maxsueldo Then
            MsgBox("el adelanto no es permitido…")
            txtAdelanto.Text = ""
            txtAdelanto.Focus()
        End If
    End Sub

    Private Sub Chkfonavi_Click(sender As Object, e As EventArgs) Handles Chkfonavi.Click
        If Chkfonavi.Checked = True Then ' Si esta chequeado Fonavi realiza el calculo
            txtFonavi.Text = CStr(Val(txtHonorarios.Text) * 0.07)
        Else
            txtFonavi.Text = CStr(0)
        End If
    End Sub

    Private Sub Chkrenta_Click(sender As Object, e As EventArgs) Handles Chkrenta.Click
        If Chkrenta.Checked = True Then
            txtRenta.Text = CStr(Val(txtHonorarios.Text) * 0.1)
        Else
            txtRenta.Text = CStr(0)
        End If

    End Sub

    Private Sub BtnNuevo_Click(sender As Object, e As EventArgs) Handles btnNuevo.Click
        txtCodigo.Text = "" : txtApellidos.Text = ""
        txtNombres.Text = "" : txtSueldo.Text = ""
        txtAdelanto.Text = "" : txtBonificacion.Text = ""
        txtHonorarios.Text = "" : txtFonavi.Text = ""
        txtRenta.Text = "" : txtNeto.Text = ""
        cboCargo.Text = ""
        RbtnCatA1.Checked = False : RbtnCatA2.Checked = False
        RbtnCatA3.Checked = False : Chkfonavi.Checked = False
        Chkrenta.Checked = False : txtCodigo.Focus()

    End Sub

    Private Sub RbtnCatA1_CheckedChanged(sender As Object, e As EventArgs) Handles RbtnCatA1.CheckedChanged
        txtBonificacion.Text = CStr(Val(txtSueldo.Text) * 0.1)
    End Sub

    Private Sub RbtnCatA2_CheckedChanged(sender As Object, e As EventArgs) Handles RbtnCatA2.CheckedChanged
        txtBonificacion.Text = CStr(Val(txtSueldo.Text) * 0.15)
    End Sub

    Private Sub RbtnCatA3_CheckedChanged(sender As Object, e As EventArgs) Handles RbtnCatA3.CheckedChanged
        txtBonificacion.Text = CStr(Val(txtSueldo.Text) * 0.2)
    End Sub

    Private Sub TxtBonificacion_TextChanged(sender As Object, e As EventArgs) Handles txtBonificacion.TextChanged
        txtHonorarios.Text = CStr(Val(txtSueldo.Text) + Val(txtBonificacion.Text))
    End Sub

    Private Sub BtnCalcular_Click(sender As Object, e As EventArgs) Handles btnCalcular.Click
        Dim desc As Double
        desc = Val(txtAdelanto.Text) + Val(txtFonavi.Text) + Val(txtRenta.Text)
        txtNeto.Text = CStr(Val(txtHonorarios.Text) - desc)
    End Sub

    Private Sub BtnSalir_Click(sender As Object, e As EventArgs) Handles btnSalir.Click
        Me.Close()
    End Sub
End Class</value>
  </data>
</root>